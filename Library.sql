Portfolio Project: Library Management System Database Analysis

Project Objective
The objective of this project is to analyze a library’s database using SQL queries to extract meaningful insights into member activity, book rentals, employee performance, and branch operations. This analysis helps in improving library management, optimizing resource allocation, and understanding user behavior to enhance the library’s overall services.

Dataset Overview
The project utilizes the following tables with key columns:
	1.	members: Contains member details such as member_id, member_name, member_address, and reg_date.
	2.	branch: Includes branch details like branch_id, manager_id, branch_address, and contact_no.
	3.	employees: Tracks employee information, including emp_id, emp_name, position, salary, and branch_id.
	4.	books: Stores book information, including isbn, book_title, category, rental_price, status, author, and publisher.
	5.	issued_status: Records details of books issued to members, such as issued_id, issued_member_id, issued_book_name, issued_date, issued_book_isbn, and issued_emp_id.
	6.	return_status: Tracks the return of issued books, with columns like return_id, issued_id, and return_date.

1.	Table Creation: Creates tables for branch, employees, issued_status, books, return_status, and members with relevant fields.
2.	Constraints: Adds foreign key constraints to link tables (e.g., linking employees to branches, issued status to books, etc.).
3.	Column Modifications: Adjusts the column size for contact_no in the branch table to accommodate longer contact numbers.


Analysis Breakdown
	1.	Member Address Update
	•	Objective: Update the address of a specific library member.
	•	Key Steps: Executed an UPDATE query to change a member’s address.
	•	Impact: Ensures up-to-date contact information for members.
    
	2.	Retrieve Books Issued by a Specific Employee
	•	Objective: Find all books issued by a particular employee.
	•	Key Steps: Used JOIN to fetch all books issued by an employee.
	•	Insight: Helps evaluate employee performance in terms of book issuance.
    
	3.	List Members Who Issued More Than One Book
	•	Objective: Identify members who have issued multiple books.
	•	Key Steps: Grouped by issued_emp_id and used the HAVING clause to filter members who issued more than one book.
	•	Impact: Helps in recognizing active members for potential loyalty programs.
    
	4.	Create Summary Table of Book Issues
	•	Objective: Summarize the number of times each book has been issued.
	•	Key Steps: Created a summary table with COUNT(issued_id) for each book.
	•	Insight: Provides insights into book popularity and helps with inventory management.
	
    5.	Retrieve Books in a Specific Category
	•	Objective: Find all books in a specific category (e.g., ‘Classic’).
	•	Key Steps: Filtered the books table using the LIKE operator for the category.
	•	Impact: Enables better categorization for easier access to books in demand.
	
    6.	Find Total Rental Income by Category
	•	Objective: Calculate the total rental income generated by books in each category.
	•	Key Steps: Used a JOIN between the books and issued_status tables, then aggregated rental prices by category.
	•	Impact: Helps assess the financial contribution of each book category to the library’s revenue.
	
    7.	Employees with Their Branch Manager’s Name
	•	Objective: List employees along with their branch details and manager names.
	•	Key Steps: Joined the employees table with the branch and manager data to gather necessary information.
	•	Insight: Provides a better understanding of the organizational structure of each branch.
	
    8.	Create a Table of Books with Rental Price Above a Certain Threshold
	•	Objective: Create a new table for books with a rental price above a specified value.
	•	Key Steps: Executed a CREATE TABLE statement with a WHERE clause to filter expensive books.
	•	Impact: Helps in distinguishing high-value books for premium services.
	
    9.	Overdue Books Report
	•	Objective: Identify overdue books (30-day return period) and calculate the overdue duration.
	•	Key Steps: Joined the issued_status and return_status tables, used DATEDIFF() to calculate overdue days.
	•	Impact: Enables better tracking of overdue books for follow-up and reminder systems.
	
    10.	Branch Performance Report
	•	Objective: Generate a performance report for each branch, showing the number of books issued, returned, and total revenue.
	•	Key Steps: Created a view combining data from issued_status, employees, branch, and books tables, then aggregated the results.
	•	Insight: Helps evaluate branch performance in terms of book issues, returns, and financials.
	
    11.	Active Members Table
	•	Objective: Create a table of active members who have issued books in the last 2 months.
	•	Key Steps: Used the CREATE TABLE AS statement with a subquery filtering for recent activity.
	•	Impact: Identifies active members for targeted marketing or engagement efforts.
	
    12.	Top Employees by Book Issues Processed
	•	Objective: Identify top employees based on the number of book issues they’ve processed.
	•	Key Steps: Used DENSE_RANK() for ranking employees and filtered for the top 3 performers.
	•	Insight: Recognizes high-performing employees for potential rewards or recognition.

    Explanation of the Stored Procedures:
	1.	Bookiss (Issuing a Book):
	•	Inputs: p_issued_id, p_member_id, p_issued_book_isbn, p_issued_emp_id
	•	Process: Checks if the book is available (status = 'yes'). If available, it inserts a record into the issued_status table, updates the book’s status to 'no', and returns a success message. If the book is not available, it returns an error message.
	2.	Returnup (Returning a Book):
	•	Inputs: p_return_id, p_issued_id
	•	Process: Retrieves the book details from issued_status, inserts a return record into return_status, and updates the book’s status to 'yes'. Returns a thank you message.

These stored procedures help automate the process of issuing and returning books while ensuring proper status updates in the library system.
Key Skills and Tools
	•	SQL Techniques: Joins, filtering, aggregation, grouping, and window functions.
	•	Data Analysis: Insights into member behavior, book popularity, financial performance, and employee productivity.
	•	Library Operations: Understanding resource allocation, member engagement, and branch performance.

Deliverables
	1.	SQL Scripts: Complete set of SQL queries for library management analysis.
	2.	Insights Report: Summary of findings to assist in decision-making for library management.
	3.	Actionable Recommendations:
	•	Optimize book categories and rental pricing based on popularity.
	•	Reward high-performing employees to maintain operational efficiency.
	•	Improve member engagement through targeted outreach based on activity.

Potential Extensions
	1.	Real-Time Dashboards:
	•	Create interactive dashboards for tracking book rentals, overdue books, and revenue.
	2.	Predictive Analytics:
	•	Develop models to predict book demand, member activity, and revenue trends.
	3.	Enhanced Member Services:
	•	Introduce a personalized recommendation system for books based on member activity.

This project showcases proficiency in SQL and demonstrates the ability to generate actionable insights from a library database, making it a valuable addition to a data analytics portfolio in the context of library management or public sector services.-- 1. Creating Database --
CREATE DATABASE Library;
USE Library;

-- 2. Creating Table: Branch --
DROP TABLE IF EXISTS branch;
CREATE TABLE branch (
    branch_id VARCHAR(10) PRIMARY KEY,
    manager_id VARCHAR(10),
    branch_address VARCHAR(50),
    contact_no VARCHAR(10)
);
ALTER TABLE branch MODIFY COLUMN contact_no VARCHAR(25);

-- 3. Creating Table: Employees --
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
    emp_id VARCHAR(10) PRIMARY KEY,
    emp_name VARCHAR(30),
    position VARCHAR(10),
    salary INT,
    branch_id VARCHAR(10)
);

-- 4. Creating Table: Issued Status --
DROP TABLE IF EXISTS issued_status;
CREATE TABLE issued_status (
    issued_id VARCHAR(10) PRIMARY KEY,
    issued_member_id VARCHAR(10),
    issued_book_name VARCHAR(75),
    issued_date DATE,
    issued_book_isbn VARCHAR(30),
    issued_emp_id VARCHAR(10)
);

-- 5. Creating Table: Books --
DROP TABLE IF EXISTS books;
CREATE TABLE books (
    isbn VARCHAR(25) PRIMARY KEY,
    book_title VARCHAR(75),
    category VARCHAR(25),
    rental_price FLOAT(10),
    status VARCHAR(10),
    author VARCHAR(30),
    publisher VARCHAR(30)
);

-- 6. Creating Table: Return Status --
DROP TABLE IF EXISTS return_status;
CREATE TABLE return_status (
    return_id VARCHAR(10) PRIMARY KEY,
    issued_id VARCHAR(10),
    return_book_name VARCHAR(75),
    return_date DATE,
    return_book_isbn VARCHAR(25)
);

-- 7. Creating Table: Members --
DROP TABLE IF EXISTS members;
CREATE TABLE members (
    member_id VARCHAR(10) PRIMARY KEY,
    member_name VARCHAR(25),
    member_address VARCHAR(25),
    reg_date DATE
);

-- 8. Adding Constraints --
ALTER TABLE employees 
ADD CONSTRAINT fk_branchid FOREIGN KEY (branch_id) REFERENCES branch(branch_id);

ALTER TABLE issued_status 
ADD CONSTRAINT fk_issued_book_isbn FOREIGN KEY (issued_book_isbn) REFERENCES books(isbn),
ADD CONSTRAINT fk_issued_member_id FOREIGN KEY (issued_member_id) REFERENCES members(member_id),
ADD CONSTRAINT fk_issued_emp_id FOREIGN KEY (issued_emp_id) REFERENCES employees(emp_id);

ALTER TABLE return_status 
ADD CONSTRAINT fk_issued_id FOREIGN KEY (issued_id) REFERENCES issued_status(issued_id),
ADD CONSTRAINT fk_return_book_isbn FOREIGN KEY (return_book_isbn) REFERENCES books(isbn);

-- 9. Inserting Values --
-- Members Table --
INSERT INTO members (member_id, member_name, member_address, reg_date) VALUES
('C101', 'Alice Johnson', '123 Main St', '2021-05-15'),
('C102', 'Bob Smith', '456 Elm St', '2021-06-20'),
-- (other rows omitted for brevity) --

-- Branch Table --
INSERT INTO branch (branch_id, manager_id, branch_address, contact_no) VALUES
('B001', 'E109', '123 Main St', '+919099988676'),
-- (other rows omitted for brevity) --

-- Employees Table --
INSERT INTO employees (emp_id, emp_name, position, salary, branch_id) VALUES
('E101', 'John Doe', 'Clerk', 60000, 'B001'),
-- (other rows omitted for brevity) --

-- Books Table --
INSERT INTO books (isbn, book_title, category, rental_price, status, author, publisher) VALUES
('978-0-553-29698-2', 'The Catcher in the Rye', 'Classic', 7.00, 'yes', 'J.D. Salinger', 'Little, Brown and Company'),
-- (other rows omitted for brevity) --

-- Issued Status Table --
INSERT INTO issued_status (issued_id, issued_member_id, issued_book_name, issued_date, issued_book_isbn, issued_emp_id) VALUES
('IS106', 'C106', 'Animal Farm', '2024-03-10', '978-0-330-25864-8', 'E104'),
-- (other rows omitted for brevity) --

-- Return Status Table --
INSERT INTO return_status (return_id, issued_id, return_date) VALUES
('RS106', 'IS108', '2024-05-05'),
-- (other rows omitted for brevity) --

-- 10. Create a New Book Record --
INSERT INTO books VALUES 
('978-1-60129-456-2', 'To Kill a Mockingbird', 'Classic', 6.00, 'yes', 'Harper Lee', 'J.B. Lippincott & Co.');

-- 11. Update an Existing Member's Address --
UPDATE members 
SET member_address = '125 Oak St'
WHERE member_id = 'C103';

-- 12. Delete a Record from Issued Status Table --
DELETE FROM issued_status 
WHERE issued_id = 'IS121';

-- 13. Retrieve Books Issued by a Specific Employee --
SELECT * FROM issued_status WHERE issued_emp_id = 'E101';

-- 14. List Members Who Issued More Than One Book --
SELECT issued_emp_id, COUNT(*) 
FROM issued_status 
GROUP BY issued_emp_id 
HAVING COUNT(*) > 1;

-- 15. Create Summary Table --
CREATE TABLE `Book Issued Count` AS 
SELECT isbn, book_title, COUNT(issued_id) AS issued_count
FROM books
JOIN issued_status ON books.isbn = issued_status.issued_book_isbn
GROUP BY isbn, book_title;

-- 16. Retrieve All Books in a Specific Category --
SELECT * FROM books WHERE category LIKE 'cla%';

-- 17. Find Total Rental Income by Category --
SELECT category, SUM(rental_price) AS total_income 
FROM books b 
JOIN issued_status i ON b.isbn = i.issued_book_isbn 
GROUP BY category;

-- 18. List Members Registered in the Last 180 Days --
SELECT * 
FROM members 
WHERE reg_date >= DATE_SUB((SELECT MAX(reg_date) FROM members), INTERVAL 180 DAY);

-- 18. List Employees with Their Branch Manager's Name and their branch details:
SELECT 
    e.emp_id,
    e.emp_name,
    e.position,
    e.salary,
    b.*,
    em.emp_name AS manager_name
FROM
    branch b
JOIN
    employees e USING (branch_id)
JOIN
    employees em ON b.manager_id = em.emp_id;

-- Create a Table of Books with Rental Price Above a Certain Threshold:
CREATE TABLE expensive_books AS 
SELECT * 
FROM
    books
WHERE
    rental_price > 7;

-- Retrieve the List of Books Not Yet Returned:
SELECT 
    COUNT(*)
FROM
    issued_status
WHERE
    issued_id NOT IN (
        SELECT 
            issued_id
        FROM
            return_status
    );

-- Query to identify members who have overdue books (assume a 30-day return period). Display the member's_id, member's name, book title, issue date, and days overdue.
SELECT 
    m.member_id,
    m.member_name,
    i.issued_book_name,
    i.issued_date,
    DATEDIFF(CURDATE(), i.issued_date) AS Days_overdue
FROM
    issued_status i
LEFT JOIN
    return_status r USING (issued_id)
JOIN
    members m ON i.issued_member_id = m.member_id
WHERE
    return_id IS NULL
    AND (SELECT 
            DATEDIFF(CURDATE(), i.issued_date)
        FROM
            issued_status i_s
        WHERE
            i_s.issued_id = i.issued_id) > 30 
ORDER BY 
    1;

-- Create a query that generates a performance report for each branch, showing the number of books issued, the number of books returned, 
-- and the total revenue generated from book rentals.            
CREATE VIEW mai AS
SELECT 
    branch_id,
    i.issued_id AS issued_id,
    issued_member_id,
    issued_book_name,
    issued_date,
    issued_book_isbn,
    issued_emp_id,
    emp_id,
    emp_name,
    position,
    salary,
    manager_id,
    branch_address,
    contact_no,
    isbn,
    book_title,
    category,
    rental_price,
    status,
    author,
    publisher,
    return_id,
    return_book_name,
    return_date,
    return_book_isbn
FROM
    issued_status i
JOIN
    employees e ON e.emp_id = i.issued_emp_id
JOIN
    branch br USING (branch_id)
JOIN
    books bo ON bo.isbn = i.issued_book_isbn
LEFT JOIN
    return_status r ON i.issued_id = r.issued_id;

-- Checking 
SELECT 
    branch_id,
    COUNT(issued_id),
    COUNT(return_id),
    SUM(rental_price)
FROM
    mai
GROUP BY 
    1;

-- Create a Table of Active Members
-- Use the CREATE TABLE AS (CTAS) statement to create a new table active_members containing members who have issued at least one book in the last 2 months.
CREATE TABLE Active_members AS 
SELECT DISTINCT 
    member_id, 
    member_name, 
    member_address, 
    reg_date 
FROM
    members m
JOIN
    issued_status i ON m.member_id = i.issued_member_id
WHERE
    issued_date >= (SELECT DATE_SUB('2024-04-13', INTERVAL 2 MONTH));

-- Checking
SELECT 
    *
FROM
    Active_members
ORDER BY 
    member_id;

-- Find Employees with the Most Book Issues Processed
-- Write a query to find the top 3 employees who have processed the most book issues. Display the employee name, number of books processed, and their branch.
SELECT 
    Issued_emp_id,
    cnt,
    cntb,
    branch_id,
    rank1
FROM 
    (
        SELECT 
            Issued_emp_id,
            COUNT(Issued_emp_id) AS cnt,
            COUNT(issued_book_name) AS cntb,
            DENSE_RANK() OVER (ORDER BY COUNT(Issued_emp_id) DESC) AS rank1
        FROM 
            issued_status
        GROUP BY 
            Issued_emp_id
    ) AS a
JOIN 
    employees 
    ON emp_id = Issued_emp_id
WHERE 
    rank1 IN (1, 2, 3);

-- Create a stored procedure to manage the status of books in a library system. 
-- Description: Write a stored procedure that updates the status of a book in the library based on its issuance. 
-- The procedure should function as follows: The stored procedure should take the book_id as an input parameter. 
-- The procedure should first check if the book is available (status = 'yes'). 
-- If the book is available, it should be issued, and the status in the books table should be updated to 'no'. 
-- If the book is not available (status = 'no'), the procedure should return an error message indicating that the book is currently not available.
-- Answer!!!!!!
-- CREATE DEFINER=`root`@`localhost` PROCEDURE `Bookiss`(p_issued_id varchar(10),p_member_id varchar(10),p_issued_book_isbn varchar(25),p_issued_emp_id varchar(10))
-- BEGIN
--  declare v_status varchar(10);
--  select status into v_status from books where p_issued_book_isbn=isbn;
--  if v_status ='yes' then
--     insert into issued_status(issued_id,issued_member_id,issued_date,issued_book_isbn,issued_emp_id)
--     values(p_issued_id,p_member_id,curdate(),p_issued_book_isbn,p_issued_emp_id);
--     update books set status='no' where isbn=p_issued_book_isbn;
--     select "Book Provided Successfully";
--  else 
--     select "Requested Book is Not Available";
--  end if;
-- END

-- Write a query to update the status of books in the books table to "Yes" when they are returned (based on entries in the return_status table).
-- Answer!!!!!!
-- CREATE DEFINER=`root`@`localhost` PROCEDURE `returnup`(in p_return_id VARCHAR(10), in p_issued_id VARCHAR(10))
-- BEGIN
--     declare v_isbn VARCHAR(50);
--     declare v_book_name VARCHAR(80);
--     
--     select issued_book_name, issued_book_isbn into v_book_name, v_isbn 
--     from issued_status where issued_id=p_issued_id;
--     insert into return_status(return_id, issued_id, return_book_name, return_date, return_book_isbn) 
--     values (p_return_id, p_issued_id, v_book_name, curdate(), v_isbn);
--     update books set status = 'yes' where isbn=v_isbn;
--     select concat('Thank You For Returning'," ",v_book_name);
-- END
